import React from "react";
import { SortDirection } from "../../constants/sort-direction.enum";
import {useTable} from "../../hooks/use-table.hook";
import {TableColumn} from "./models/table-column";
import './style.css'

/**
 * –¢–∞–±–ª–∏—á–∫–∞
 * @param {object[]} data - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ. –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–ª–æ–Ω–∫–∏, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å —á—Ç–æ–±—ã –≤—Å–µ –∫–ª—é—á–∏ (–¥–∞–∂–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ) —É –æ–±—ä–µ–∫—Ç–∞ –±—ã–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å –∫–ª—é—á–∏
 * @param {object[]} columns - –º–∞—Å—Å–∏–≤ –∫–æ–ª–æ–Ω–æ–∫
 * @param {boolean} sorted - —Ñ–ª–∞–≥, –≥–æ–≤–æ—Ä—è—â–∏–π –Ω—É–∂–Ω–∞ –ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
 * @param {function} callback - A callback to run.
 * @param {function} filterFn - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */
interface TableProps<T extends object> {
    data: T[],
    columns?: TableColumn<T>[],
    sorted?: boolean,
    sortFn?: (columnId: string, direction: SortDirection) => (a: T, b: T) => number,
    filterFn?: (value: T, index: number, array: T[]) => boolean,
}

export const Table = <T extends object>({data, columns, sortFn, sorted, filterFn}: TableProps<T>) => {

    const {headers, rows} = useTable({
            data,
            columns,
            useSortBy: sorted,
            sortFn: sorted ? sortFn : undefined,
            filterFn
        }
    )

    return (
        <table>
            <thead>
            <tr>
                {headers.map(header => (
                    <th key={header.id}>
                        <div>
                            {header.render()}
                            {header.isSorted
                                ? header.isSortedDesc
                                    ? ' üîΩ'
                                    : ' üîº'
                                : ''}
                        </div>
                    </th>
                ))}
            </tr>
            </thead>

            <tbody>
            {rows.map(row =>
                <tr key={row.id}>
                    {row.cells.map(cell =>
                        <td key={cell.id}>
                            {cell.render()}
                        </td>
                    )}
                </tr>
            )}

            </tbody>
        </table>
    )
}
